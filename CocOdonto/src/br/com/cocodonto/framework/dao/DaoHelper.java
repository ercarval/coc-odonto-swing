package br.com.cocodonto.framework.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DaoHelper {

	private static final ThreadLocal<Connection> context = new ThreadLocal<Connection>();
	
	private boolean transactionScope = false;
	
	/**
	 * Fornecer conexao ao banco de dados
	 * 
	 * @return Connection
	 * @throws SQLExceptione
	 */
	public Connection getConnection() throws SQLException {

		Connection conn = null;
		try {
			Class.forName("org.apache.derby.jdbc.ClientDriver");
			conn = DriverManager.getConnection(
					"jdbc:derby://localhost:1527/coc", "app", "app");
			conn.setAutoCommit(false);
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return conn;

	}

	public void preparedUpdate ( String query , Object... parameters ) throws SQLException {
		
		PreparedStatement pstmt = null ;
		try {
		
			pstmt = getConnectionFromContext().prepareStatement(query);
			setPreparedStatementColumnContent(pstmt,parameters);
			pstmt.executeUpdate();

		} finally {
			release(pstmt);
		}
		
	}
	
	private void setPreparedStatementColumnContent (PreparedStatement pstmt 
												  , Object... parameters  ) throws SQLException {
		
		int i =0;
		for (Object data : parameters) {
			if ( data instanceof java.util.Date ) {
				pstmt.setDate (++i, new java.sql.Date(  ( (java.util.Date) data ).getTime() ) );
				continue;
			}
			pstmt.setObject(++i, data);
		}

	}

	public Long preparedUpdateWithAutoGeneratedKeys ( String query , Object... parameters ) throws SQLException {
		
		PreparedStatement pstmt = null ;
		ResultSet rset = null;
		Long id = 0l;
		try {
			pstmt = getConnectionFromContext().prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
			setPreparedStatementColumnContent(pstmt,parameters);
			pstmt.executeUpdate();
			rset = pstmt.getGeneratedKeys();
			if (rset.next()) {
				id = rset.getLong(1);
			}

		} finally {
			release(pstmt);
			release(rset);
		}
		
		return id;
		
	}	
	
	private Connection getConnectionFromContext ()  throws SQLException  {
		Connection conn = null;

		conn = context.get();
		
		if (conn == null) throw new SQLException("Invalid Transaction");
		if (conn.isClosed()) throw new SQLException("Invalid Transaction conection was closed");
		
		return conn;
	}
	
	public void beginTransaction() throws SQLException {
		Connection conn = getConnection();
		conn.setAutoCommit(false);
		context.set(conn);
	}

	public void endTransaction () throws SQLException {
		commitTransaction();
		release( getConnectionFromContext() );
		context.remove();
	}
	
	public void commit (Connection conn) {
		if (conn == null) return;
		try {
			conn.commit();
		} catch (SQLException e) {}//close quiet	
	}
	

	
	public void commitTransaction() {
		commit(context.get());
	}

	public void rollback (Connection conn) {
		if (conn == null) return;
		try {
			conn.rollback();
		} catch (SQLException e) {}//close quiet	
	}

	
	public void rollbackTransaction() {
		rollback(context.get());
	}
	
	public void release(Statement stmt) {
		if (stmt == null)
			return;
		try {
			stmt.close();
		} catch (SQLException e) {
		}
	}

	public void release(Connection conn) {
		
		if (conn == null)
			return;
		try {
			conn.close();
		} catch (SQLException e) {
		}
		
	}

	public void release(ResultSet rset) {
		if (rset == null)
			return;
		try {
			rset.close();
		} catch (SQLException e) {
		}
	}
	
	public void releaseAll (Connection conn, Statement stmt) {
		release(stmt);
		release(conn);
	}

	public void releaseAll (Connection conn, Statement stmt, ResultSet rset) {
		release(rset);
		releaseAll(conn, stmt);
	}
	
	
}
